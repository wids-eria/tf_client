//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g 2012-05-16 11:17:01

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


#pragma warning disable 3021
#pragma warning disable 0414


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
//[System.CLSCompliant(false)]
public partial class StateMachineTransitionLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__21=21;
	public const int T__22=22;
	public const int T__23=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int ARGTYPE_DELEGATE=4;
	public const int ARGTYPE_FLOAT=5;
	public const int ARGTYPE_INT=6;
	public const int FLOAT=7;
	public const int ID=8;
	public const int INT=9;
	public const int NEWLINE=10;
	public const int NOT=11;
	public const int PROG=12;
	public const int PROGEXPR=13;
	public const int PROGEXPR_RESTART=14;
	public const int VARARGS=15;
	public const int VARDECL=16;
	public const int VARDECLBLOCK=17;
	public const int VARNAME=18;
	public const int VARTYPE=19;
	public const int WS=20;

    // delegates
    // delegators

	public StateMachineTransitionLexer()
	{
		OnCreated();
	}

	public StateMachineTransitionLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public StateMachineTransitionLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "/Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g"; } }

	private static readonly bool[] decisionCanBacktrack = new bool[0];

	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__21() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__21() {}

    // $ANTLR start "T__21"
    [GrammarRule("T__21")]
    private void mT__21()
    {
    	EnterRule_T__21();
    	EnterRule("T__21", 1);
    	TraceIn("T__21", 1);
    		try
    		{
    		int _type = T__21;
    		int _channel = DefaultTokenChannel;
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:12:7: ( '&' )
    		DebugEnterAlt(1);
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:12:9: '&'
    		{
    		DebugLocation(12, 9);
    		Match('&'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__21", 1);
    		LeaveRule("T__21", 1);
    		LeaveRule_T__21();
        }
    }
    // $ANTLR end "T__21"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__22() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__22() {}

    // $ANTLR start "T__22"
    [GrammarRule("T__22")]
    private void mT__22()
    {
    	EnterRule_T__22();
    	EnterRule("T__22", 2);
    	TraceIn("T__22", 2);
    		try
    		{
    		int _type = T__22;
    		int _channel = DefaultTokenChannel;
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:13:7: ( '(' )
    		DebugEnterAlt(1);
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:13:9: '('
    		{
    		DebugLocation(13, 9);
    		Match('('); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__22", 2);
    		LeaveRule("T__22", 2);
    		LeaveRule_T__22();
        }
    }
    // $ANTLR end "T__22"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__23() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__23() {}

    // $ANTLR start "T__23"
    [GrammarRule("T__23")]
    private void mT__23()
    {
    	EnterRule_T__23();
    	EnterRule("T__23", 3);
    	TraceIn("T__23", 3);
    		try
    		{
    		int _type = T__23;
    		int _channel = DefaultTokenChannel;
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:14:7: ( ')' )
    		DebugEnterAlt(1);
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:14:9: ')'
    		{
    		DebugLocation(14, 9);
    		Match(')'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__23", 3);
    		LeaveRule("T__23", 3);
    		LeaveRule_T__23();
        }
    }
    // $ANTLR end "T__23"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__24() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__24() {}

    // $ANTLR start "T__24"
    [GrammarRule("T__24")]
    private void mT__24()
    {
    	EnterRule_T__24();
    	EnterRule("T__24", 4);
    	TraceIn("T__24", 4);
    		try
    		{
    		int _type = T__24;
    		int _channel = DefaultTokenChannel;
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:15:7: ( ',' )
    		DebugEnterAlt(1);
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:15:9: ','
    		{
    		DebugLocation(15, 9);
    		Match(','); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__24", 4);
    		LeaveRule("T__24", 4);
    		LeaveRule_T__24();
        }
    }
    // $ANTLR end "T__24"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__25() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__25() {}

    // $ANTLR start "T__25"
    [GrammarRule("T__25")]
    private void mT__25()
    {
    	EnterRule_T__25();
    	EnterRule("T__25", 5);
    	TraceIn("T__25", 5);
    		try
    		{
    		int _type = T__25;
    		int _channel = DefaultTokenChannel;
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:16:7: ( ';' )
    		DebugEnterAlt(1);
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:16:9: ';'
    		{
    		DebugLocation(16, 9);
    		Match(';'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__25", 5);
    		LeaveRule("T__25", 5);
    		LeaveRule_T__25();
        }
    }
    // $ANTLR end "T__25"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__26() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__26() {}

    // $ANTLR start "T__26"
    [GrammarRule("T__26")]
    private void mT__26()
    {
    	EnterRule_T__26();
    	EnterRule("T__26", 6);
    	TraceIn("T__26", 6);
    		try
    		{
    		int _type = T__26;
    		int _channel = DefaultTokenChannel;
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:17:7: ( '{' )
    		DebugEnterAlt(1);
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:17:9: '{'
    		{
    		DebugLocation(17, 9);
    		Match('{'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__26", 6);
    		LeaveRule("T__26", 6);
    		LeaveRule_T__26();
        }
    }
    // $ANTLR end "T__26"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__27() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__27() {}

    // $ANTLR start "T__27"
    [GrammarRule("T__27")]
    private void mT__27()
    {
    	EnterRule_T__27();
    	EnterRule("T__27", 7);
    	TraceIn("T__27", 7);
    		try
    		{
    		int _type = T__27;
    		int _channel = DefaultTokenChannel;
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:18:7: ( '|' )
    		DebugEnterAlt(1);
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:18:9: '|'
    		{
    		DebugLocation(18, 9);
    		Match('|'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__27", 7);
    		LeaveRule("T__27", 7);
    		LeaveRule_T__27();
        }
    }
    // $ANTLR end "T__27"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__28() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__28() {}

    // $ANTLR start "T__28"
    [GrammarRule("T__28")]
    private void mT__28()
    {
    	EnterRule_T__28();
    	EnterRule("T__28", 8);
    	TraceIn("T__28", 8);
    		try
    		{
    		int _type = T__28;
    		int _channel = DefaultTokenChannel;
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:19:7: ( '}' )
    		DebugEnterAlt(1);
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:19:9: '}'
    		{
    		DebugLocation(19, 9);
    		Match('}'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__28", 8);
    		LeaveRule("T__28", 8);
    		LeaveRule_T__28();
        }
    }
    // $ANTLR end "T__28"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_NOT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_NOT() {}

    // $ANTLR start "NOT"
    [GrammarRule("NOT")]
    private void mNOT()
    {
    	EnterRule_NOT();
    	EnterRule("NOT", 9);
    	TraceIn("NOT", 9);
    		try
    		{
    		int _type = NOT;
    		int _channel = DefaultTokenChannel;
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:94:6: ( '!' )
    		DebugEnterAlt(1);
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:94:8: '!'
    		{
    		DebugLocation(94, 8);
    		Match('!'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("NOT", 9);
    		LeaveRule("NOT", 9);
    		LeaveRule_NOT();
        }
    }
    // $ANTLR end "NOT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_ID() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_ID() {}

    // $ANTLR start "ID"
    [GrammarRule("ID")]
    private void mID()
    {
    	EnterRule_ID();
    	EnterRule("ID", 10);
    	TraceIn("ID", 10);
    		try
    		{
    		int _type = ID;
    		int _channel = DefaultTokenChannel;
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:95:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' )+ )
    		DebugEnterAlt(1);
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:95:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' )+
    		{
    		DebugLocation(95, 7);
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:95:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' )+
    		int cnt1=0;
    		try { DebugEnterSubRule(1);
    		while (true)
    		{
    			int alt1=2;
    			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
    			int LA1_0 = input.LA(1);

    			if (((LA1_0>='A' && LA1_0<='Z')||LA1_0=='_'||(LA1_0>='a' && LA1_0<='z')))
    			{
    				alt1 = 1;
    			}


    			} finally { DebugExitDecision(1); }
    			switch (alt1)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:
    				{
    				DebugLocation(95, 7);
    				input.Consume();


    				}
    				break;

    			default:
    				if (cnt1 >= 1)
    					goto loop1;

    				EarlyExitException eee1 = new EarlyExitException( 1, input );
    				DebugRecognitionException(eee1);
    				throw eee1;
    			}
    			cnt1++;
    		}
    		loop1:
    			;

    		} finally { DebugExitSubRule(1); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("ID", 10);
    		LeaveRule("ID", 10);
    		LeaveRule_ID();
        }
    }
    // $ANTLR end "ID"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_FLOAT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_FLOAT() {}

    // $ANTLR start "FLOAT"
    [GrammarRule("FLOAT")]
    private void mFLOAT()
    {
    	EnterRule_FLOAT();
    	EnterRule("FLOAT", 11);
    	TraceIn("FLOAT", 11);
    		try
    		{
    		int _type = FLOAT;
    		int _channel = DefaultTokenChannel;
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:96:7: ( INT '.' INT )
    		DebugEnterAlt(1);
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:96:10: INT '.' INT
    		{
    		DebugLocation(96, 10);
    		mINT(); 
    		DebugLocation(96, 14);
    		Match('.'); 
    		DebugLocation(96, 18);
    		mINT(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("FLOAT", 11);
    		LeaveRule("FLOAT", 11);
    		LeaveRule_FLOAT();
        }
    }
    // $ANTLR end "FLOAT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_INT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_INT() {}

    // $ANTLR start "INT"
    [GrammarRule("INT")]
    private void mINT()
    {
    	EnterRule_INT();
    	EnterRule("INT", 12);
    	TraceIn("INT", 12);
    		try
    		{
    		int _type = INT;
    		int _channel = DefaultTokenChannel;
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:97:8: ( ( '0' .. '9' )+ )
    		DebugEnterAlt(1);
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:97:11: ( '0' .. '9' )+
    		{
    		DebugLocation(97, 11);
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:97:11: ( '0' .. '9' )+
    		int cnt2=0;
    		try { DebugEnterSubRule(2);
    		while (true)
    		{
    			int alt2=2;
    			try { DebugEnterDecision(2, decisionCanBacktrack[2]);
    			int LA2_0 = input.LA(1);

    			if (((LA2_0>='0' && LA2_0<='9')))
    			{
    				alt2 = 1;
    			}


    			} finally { DebugExitDecision(2); }
    			switch (alt2)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:
    				{
    				DebugLocation(97, 11);
    				input.Consume();


    				}
    				break;

    			default:
    				if (cnt2 >= 1)
    					goto loop2;

    				EarlyExitException eee2 = new EarlyExitException( 2, input );
    				DebugRecognitionException(eee2);
    				throw eee2;
    			}
    			cnt2++;
    		}
    		loop2:
    			;

    		} finally { DebugExitSubRule(2); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("INT", 12);
    		LeaveRule("INT", 12);
    		LeaveRule_INT();
        }
    }
    // $ANTLR end "INT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_NEWLINE() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_NEWLINE() {}

    // $ANTLR start "NEWLINE"
    [GrammarRule("NEWLINE")]
    private void mNEWLINE()
    {
    	EnterRule_NEWLINE();
    	EnterRule("NEWLINE", 13);
    	TraceIn("NEWLINE", 13);
    		try
    		{
    		int _type = NEWLINE;
    		int _channel = DefaultTokenChannel;
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:98:9: ( ( '\\r' )? '\\n' )
    		DebugEnterAlt(1);
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:98:11: ( '\\r' )? '\\n'
    		{
    		DebugLocation(98, 11);
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:98:11: ( '\\r' )?
    		int alt3=2;
    		try { DebugEnterSubRule(3);
    		try { DebugEnterDecision(3, decisionCanBacktrack[3]);
    		int LA3_0 = input.LA(1);

    		if ((LA3_0=='\r'))
    		{
    			alt3 = 1;
    		}
    		} finally { DebugExitDecision(3); }
    		switch (alt3)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:98:11: '\\r'
    			{
    			DebugLocation(98, 11);
    			Match('\r'); 

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(3); }

    		DebugLocation(98, 17);
    		Match('\n'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("NEWLINE", 13);
    		LeaveRule("NEWLINE", 13);
    		LeaveRule_NEWLINE();
        }
    }
    // $ANTLR end "NEWLINE"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_WS() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_WS() {}

    // $ANTLR start "WS"
    [GrammarRule("WS")]
    private void mWS()
    {
    	EnterRule_WS();
    	EnterRule("WS", 14);
    	TraceIn("WS", 14);
    		try
    		{
    		int _type = WS;
    		int _channel = DefaultTokenChannel;
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:99:5: ( ( ' ' | '\\t' )+ )
    		DebugEnterAlt(1);
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:99:7: ( ' ' | '\\t' )+
    		{
    		DebugLocation(99, 7);
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:99:7: ( ' ' | '\\t' )+
    		int cnt4=0;
    		try { DebugEnterSubRule(4);
    		while (true)
    		{
    			int alt4=2;
    			try { DebugEnterDecision(4, decisionCanBacktrack[4]);
    			int LA4_0 = input.LA(1);

    			if ((LA4_0=='\t'||LA4_0==' '))
    			{
    				alt4 = 1;
    			}


    			} finally { DebugExitDecision(4); }
    			switch (alt4)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:
    				{
    				DebugLocation(99, 7);
    				input.Consume();


    				}
    				break;

    			default:
    				if (cnt4 >= 1)
    					goto loop4;

    				EarlyExitException eee4 = new EarlyExitException( 4, input );
    				DebugRecognitionException(eee4);
    				throw eee4;
    			}
    			cnt4++;
    		}
    		loop4:
    			;

    		} finally { DebugExitSubRule(4); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("WS", 14);
    		LeaveRule("WS", 14);
    		LeaveRule_WS();
        }
    }
    // $ANTLR end "WS"

    public override void mTokens()
    {
    	// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:1:8: ( T__21 | T__22 | T__23 | T__24 | T__25 | T__26 | T__27 | T__28 | NOT | ID | FLOAT | INT | NEWLINE | WS )
    	int alt5=14;
    	try { DebugEnterDecision(5, decisionCanBacktrack[5]);
    	try
    	{
    		alt5 = dfa5.Predict(input);
    	}
    	catch (NoViableAltException nvae)
    	{
    		DebugRecognitionException(nvae);
    		throw;
    	}
    	} finally { DebugExitDecision(5); }
    	switch (alt5)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:1:10: T__21
    		{
    		DebugLocation(1, 10);
    		mT__21(); 

    		}
    		break;
    	case 2:
    		DebugEnterAlt(2);
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:1:16: T__22
    		{
    		DebugLocation(1, 16);
    		mT__22(); 

    		}
    		break;
    	case 3:
    		DebugEnterAlt(3);
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:1:22: T__23
    		{
    		DebugLocation(1, 22);
    		mT__23(); 

    		}
    		break;
    	case 4:
    		DebugEnterAlt(4);
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:1:28: T__24
    		{
    		DebugLocation(1, 28);
    		mT__24(); 

    		}
    		break;
    	case 5:
    		DebugEnterAlt(5);
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:1:34: T__25
    		{
    		DebugLocation(1, 34);
    		mT__25(); 

    		}
    		break;
    	case 6:
    		DebugEnterAlt(6);
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:1:40: T__26
    		{
    		DebugLocation(1, 40);
    		mT__26(); 

    		}
    		break;
    	case 7:
    		DebugEnterAlt(7);
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:1:46: T__27
    		{
    		DebugLocation(1, 46);
    		mT__27(); 

    		}
    		break;
    	case 8:
    		DebugEnterAlt(8);
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:1:52: T__28
    		{
    		DebugLocation(1, 52);
    		mT__28(); 

    		}
    		break;
    	case 9:
    		DebugEnterAlt(9);
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:1:58: NOT
    		{
    		DebugLocation(1, 58);
    		mNOT(); 

    		}
    		break;
    	case 10:
    		DebugEnterAlt(10);
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:1:62: ID
    		{
    		DebugLocation(1, 62);
    		mID(); 

    		}
    		break;
    	case 11:
    		DebugEnterAlt(11);
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:1:65: FLOAT
    		{
    		DebugLocation(1, 65);
    		mFLOAT(); 

    		}
    		break;
    	case 12:
    		DebugEnterAlt(12);
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:1:71: INT
    		{
    		DebugLocation(1, 71);
    		mINT(); 

    		}
    		break;
    	case 13:
    		DebugEnterAlt(13);
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:1:75: NEWLINE
    		{
    		DebugLocation(1, 75);
    		mNEWLINE(); 

    		}
    		break;
    	case 14:
    		DebugEnterAlt(14);
    		// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransition.g:1:83: WS
    		{
    		DebugLocation(1, 83);
    		mWS(); 

    		}
    		break;

    	}

    }


	#region DFA
	DFA5 dfa5;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa5 = new DFA5(this);
	}

	private class DFA5 : DFA
	{
		private const string DFA5_eotS =
			"\xB\xFFFF\x1\xE\x4\xFFFF";
		private const string DFA5_eofS =
			"\x10\xFFFF";
		private const string DFA5_minS =
			"\x1\x9\xA\xFFFF\x1\x2E\x4\xFFFF";
		private const string DFA5_maxS =
			"\x1\x7D\xA\xFFFF\x1\x39\x4\xFFFF";
		private const string DFA5_acceptS =
			"\x1\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9\x1\xA"+
			"\x1\xFFFF\x1\xD\x1\xE\x1\xC\x1\xB";
		private const string DFA5_specialS =
			"\x10\xFFFF}>";
		private static readonly string[] DFA5_transitionS =
			{
				"\x1\xD\x1\xC\x2\xFFFF\x1\xC\x12\xFFFF\x1\xD\x1\x9\x4\xFFFF\x1\x1\x1"+
				"\xFFFF\x1\x2\x1\x3\x2\xFFFF\x1\x4\x3\xFFFF\xA\xB\x1\xFFFF\x1\x5\x5\xFFFF"+
				"\x1A\xA\x4\xFFFF\x1\xA\x1\xFFFF\x1A\xA\x1\x6\x1\x7\x1\x8",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xF\x1\xFFFF\xA\xB",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA5_eot = DFA.UnpackEncodedString(DFA5_eotS);
		private static readonly short[] DFA5_eof = DFA.UnpackEncodedString(DFA5_eofS);
		private static readonly char[] DFA5_min = DFA.UnpackEncodedStringToUnsignedChars(DFA5_minS);
		private static readonly char[] DFA5_max = DFA.UnpackEncodedStringToUnsignedChars(DFA5_maxS);
		private static readonly short[] DFA5_accept = DFA.UnpackEncodedString(DFA5_acceptS);
		private static readonly short[] DFA5_special = DFA.UnpackEncodedString(DFA5_specialS);
		private static readonly short[][] DFA5_transition;

		static DFA5()
		{
			int numStates = DFA5_transitionS.Length;
			DFA5_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA5_transition[i] = DFA.UnpackEncodedString(DFA5_transitionS[i]);
			}
		}

		public DFA5( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 5;
			this.eot = DFA5_eot;
			this.eof = DFA5_eof;
			this.min = DFA5_min;
			this.max = DFA5_max;
			this.accept = DFA5_accept;
			this.special = DFA5_special;
			this.transition = DFA5_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__21 | T__22 | T__23 | T__24 | T__25 | T__26 | T__27 | T__28 | NOT | ID | FLOAT | INT | NEWLINE | WS );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}
