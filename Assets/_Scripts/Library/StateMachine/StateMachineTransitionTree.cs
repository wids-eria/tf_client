//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g 2012-05-16 11:14:56

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


#pragma warning disable 3021
#pragma warning disable 0414


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
//[System.CLSCompliant(false)]
public partial class StateMachineTransitionTree : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ARGTYPE_DELEGATE", "ARGTYPE_FLOAT", "ARGTYPE_INT", "FLOAT", "ID", "INT", "NEWLINE", "NOT", "PROG", "PROGEXPR", "PROGEXPR_RESTART", "VARARGS", "VARDECL", "VARDECLBLOCK", "VARNAME", "VARTYPE", "WS", "'&'", "'('", "')'", "','", "';'", "'{'", "'|'", "'}'"
	};
	public const int EOF=-1;
	public const int T__21=21;
	public const int T__22=22;
	public const int T__23=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int ARGTYPE_DELEGATE=4;
	public const int ARGTYPE_FLOAT=5;
	public const int ARGTYPE_INT=6;
	public const int FLOAT=7;
	public const int ID=8;
	public const int INT=9;
	public const int NEWLINE=10;
	public const int NOT=11;
	public const int PROG=12;
	public const int PROGEXPR=13;
	public const int PROGEXPR_RESTART=14;
	public const int VARARGS=15;
	public const int VARDECL=16;
	public const int VARDECLBLOCK=17;
	public const int VARNAME=18;
	public const int VARTYPE=19;
	public const int WS=20;

	#if ANTLR_DEBUG
		private static readonly bool[] decisionCanBacktrack =
			new bool[]
			{
				false, // invalid decision
				false, false, false, false, false, false, false, false, false
			};
	#else
		private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public StateMachineTransitionTree(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public StateMachineTransitionTree(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return StateMachineTransitionTree.tokenNames; } }
	public override string GrammarFileName { get { return "/Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g"; } }


	public Dictionary<string, int> Labels = new Dictionary<string, int>();
	public List<string>	Instructions = new List<string>();

	public void process() {
		prog();
	}


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_prog() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_prog() {}

	// $ANTLR start "prog"
	// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:27:1: prog : ^( PROG ( declBlock )? expr ) ;
	[GrammarRule("prog")]
	private void prog()
	{
		EnterRule_prog();
		EnterRule("prog", 1);
		TraceIn("prog", 1);
		try { DebugEnterRule(GrammarFileName, "prog");
		DebugLocation(27, 1);
		try
		{
			// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:27:6: ( ^( PROG ( declBlock )? expr ) )
			DebugEnterAlt(1);
			// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:27:8: ^( PROG ( declBlock )? expr )
			{
			DebugLocation(27, 8);
			DebugLocation(27, 10);
			Match(input,PROG,Follow._PROG_in_prog68); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(27, 15);
			// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:27:15: ( declBlock )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
			int LA1_0 = input.LA(1);

			if ((LA1_0==VARDECLBLOCK))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:27:15: declBlock
				{
				DebugLocation(27, 15);
				PushFollow(Follow._declBlock_in_prog70);
				declBlock();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(27, 26);
			PushFollow(Follow._expr_in_prog73);
			expr();
			PopFollow();


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("prog", 1);
			LeaveRule("prog", 1);
			LeaveRule_prog();
	    }
	 	DebugLocation(28, 1);
		} finally { DebugExitRule(GrammarFileName, "prog"); }
		return;

	}
	// $ANTLR end "prog"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declBlock() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declBlock() {}

	// $ANTLR start "declBlock"
	// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:32:1: declBlock : ^( VARDECLBLOCK ( decl )+ ) ;
	[GrammarRule("declBlock")]
	private void declBlock()
	{
		EnterRule_declBlock();
		EnterRule("declBlock", 2);
		TraceIn("declBlock", 2);
		try { DebugEnterRule(GrammarFileName, "declBlock");
		DebugLocation(32, 1);
		try
		{
			// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:32:11: ( ^( VARDECLBLOCK ( decl )+ ) )
			DebugEnterAlt(1);
			// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:32:13: ^( VARDECLBLOCK ( decl )+ )
			{
			DebugLocation(32, 13);
			DebugLocation(32, 15);
			Match(input,VARDECLBLOCK,Follow._VARDECLBLOCK_in_declBlock88); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(32, 28);
			// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:32:28: ( decl )+
			int cnt2=0;
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, decisionCanBacktrack[2]);
				int LA2_0 = input.LA(1);

				if ((LA2_0==VARDECL))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:32:28: decl
					{
					DebugLocation(32, 28);
					PushFollow(Follow._decl_in_declBlock90);
					decl();
					PopFollow();


					}
					break;

				default:
					if (cnt2 >= 1)
						goto loop2;

					EarlyExitException eee2 = new EarlyExitException( 2, input );
					DebugRecognitionException(eee2);
					throw eee2;
				}
				cnt2++;
			}
			loop2:
				;

			} finally { DebugExitSubRule(2); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("declBlock", 2);
			LeaveRule("declBlock", 2);
			LeaveRule_declBlock();
	    }
	 	DebugLocation(33, 1);
		} finally { DebugExitRule(GrammarFileName, "declBlock"); }
		return;

	}
	// $ANTLR end "declBlock"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_decl() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_decl() {}

	// $ANTLR start "decl"
	// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:35:1: decl : ^( VARDECL n= name t= type (a= args )? ) ;
	[GrammarRule("decl")]
	private void decl()
	{
		EnterRule_decl();
		EnterRule("decl", 3);
		TraceIn("decl", 3);
	    string n = default(string);
	    string t = default(string);
	    string a = default(string);

		try { DebugEnterRule(GrammarFileName, "decl");
		DebugLocation(35, 1);
		try
		{
			// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:35:6: ( ^( VARDECL n= name t= type (a= args )? ) )
			DebugEnterAlt(1);
			// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:35:8: ^( VARDECL n= name t= type (a= args )? )
			{
			DebugLocation(35, 8);
			DebugLocation(35, 10);
			Match(input,VARDECL,Follow._VARDECL_in_decl103); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(35, 19);
			PushFollow(Follow._name_in_decl107);
			n=name();
			PopFollow();

			DebugLocation(35, 26);
			PushFollow(Follow._type_in_decl111);
			t=type();
			PopFollow();

			DebugLocation(35, 33);
			// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:35:33: (a= args )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, decisionCanBacktrack[3]);
			int LA3_0 = input.LA(1);

			if ((LA3_0==VARARGS))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:35:33: a= args
				{
				DebugLocation(35, 33);
				PushFollow(Follow._args_in_decl115);
				a=args();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(3); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(35, 41);

						Instructions.Add( "DeclareBehavior " + t + " " + n + " " +  a );
					

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("decl", 3);
			LeaveRule("decl", 3);
			LeaveRule_decl();
	    }
	 	DebugLocation(38, 1);
		} finally { DebugExitRule(GrammarFileName, "decl"); }
		return;

	}
	// $ANTLR end "decl"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_type() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_type() {}

	// $ANTLR start "type"
	// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:40:1: type returns [ string type ] : ^( VARTYPE ID ) ;
	[GrammarRule("type")]
	private string type()
	{
		EnterRule_type();
		EnterRule("type", 4);
		TraceIn("type", 4);
	    string type = default(string);


	    CommonTree ID1 = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "type");
		DebugLocation(40, 1);
		try
		{
			// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:41:2: ( ^( VARTYPE ID ) )
			DebugEnterAlt(1);
			// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:41:4: ^( VARTYPE ID )
			{
			DebugLocation(41, 4);
			DebugLocation(41, 6);
			Match(input,VARTYPE,Follow._VARTYPE_in_type134); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(41, 14);
			ID1=(CommonTree)Match(input,ID,Follow._ID_in_type136); 

			Match(input, TokenTypes.Up, null); 

			DebugLocation(41, 18);

						type = (ID1!=null?ID1.Text:null);
					

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type", 4);
			LeaveRule("type", 4);
			LeaveRule_type();
	    }
	 	DebugLocation(44, 1);
		} finally { DebugExitRule(GrammarFileName, "type"); }
		return type;

	}
	// $ANTLR end "type"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_name() {}

	// $ANTLR start "name"
	// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:46:1: name returns [ string name ] : ^( VARNAME ID ) ;
	[GrammarRule("name")]
	private string name()
	{
		EnterRule_name();
		EnterRule("name", 5);
		TraceIn("name", 5);
	    string name = default(string);


	    CommonTree ID2 = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "name");
		DebugLocation(46, 1);
		try
		{
			// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:47:2: ( ^( VARNAME ID ) )
			DebugEnterAlt(1);
			// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:47:4: ^( VARNAME ID )
			{
			DebugLocation(47, 4);
			DebugLocation(47, 6);
			Match(input,VARNAME,Follow._VARNAME_in_name155); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(47, 14);
			ID2=(CommonTree)Match(input,ID,Follow._ID_in_name157); 

			Match(input, TokenTypes.Up, null); 

			DebugLocation(47, 18);

						name = (ID2!=null?ID2.Text:null);
					

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("name", 5);
			LeaveRule("name", 5);
			LeaveRule_name();
	    }
	 	DebugLocation(50, 1);
		} finally { DebugExitRule(GrammarFileName, "name"); }
		return name;

	}
	// $ANTLR end "name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_args() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_args() {}

	// $ANTLR start "args"
	// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:52:1: args returns [ string val ] : ^( VARARGS (a= arg )+ ) ;
	[GrammarRule("args")]
	private string args()
	{
		EnterRule_args();
		EnterRule("args", 6);
		TraceIn("args", 6);
	    string val = default(string);


	    string a = default(string);

		try { DebugEnterRule(GrammarFileName, "args");
		DebugLocation(52, 1);
		try
		{
			// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:53:2: ( ^( VARARGS (a= arg )+ ) )
			DebugEnterAlt(1);
			// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:53:4: ^( VARARGS (a= arg )+ )
			{
			DebugLocation(53, 4);
			DebugLocation(53, 6);
			Match(input,VARARGS,Follow._VARARGS_in_args175); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(53, 15);
			// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:53:15: (a= arg )+
			int cnt4=0;
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, decisionCanBacktrack[4]);
				int LA4_0 = input.LA(1);

				if (((LA4_0>=ARGTYPE_DELEGATE && LA4_0<=ARGTYPE_INT)))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:53:15: a= arg
					{
					DebugLocation(53, 15);
					PushFollow(Follow._arg_in_args179);
					a=arg();
					PopFollow();


					}
					break;

				default:
					if (cnt4 >= 1)
						goto loop4;

					EarlyExitException eee4 = new EarlyExitException( 4, input );
					DebugRecognitionException(eee4);
					throw eee4;
				}
				cnt4++;
			}
			loop4:
				;

			} finally { DebugExitSubRule(4); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(53, 22);
			 val = a; 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("args", 6);
			LeaveRule("args", 6);
			LeaveRule_args();
	    }
	 	DebugLocation(54, 1);
		} finally { DebugExitRule(GrammarFileName, "args"); }
		return val;

	}
	// $ANTLR end "args"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_arg() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_arg() {}

	// $ANTLR start "arg"
	// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:56:1: arg returns [ string val ] : ( ^( ARGTYPE_DELEGATE ID ) | ^( ARGTYPE_INT INT ) | ^( ARGTYPE_FLOAT FLOAT ) );
	[GrammarRule("arg")]
	private string arg()
	{
		EnterRule_arg();
		EnterRule("arg", 7);
		TraceIn("arg", 7);
	    string val = default(string);


	    CommonTree ID3 = default(CommonTree);
	    CommonTree INT4 = default(CommonTree);
	    CommonTree FLOAT5 = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "arg");
		DebugLocation(56, 1);
		try
		{
			// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:57:2: ( ^( ARGTYPE_DELEGATE ID ) | ^( ARGTYPE_INT INT ) | ^( ARGTYPE_FLOAT FLOAT ) )
			int alt5=3;
			try { DebugEnterDecision(5, decisionCanBacktrack[5]);
			switch (input.LA(1))
			{
			case ARGTYPE_DELEGATE:
				{
				alt5 = 1;
				}
				break;
			case ARGTYPE_INT:
				{
				alt5 = 2;
				}
				break;
			case ARGTYPE_FLOAT:
				{
				alt5 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:57:4: ^( ARGTYPE_DELEGATE ID )
				{
				DebugLocation(57, 4);
				DebugLocation(57, 6);
				Match(input,ARGTYPE_DELEGATE,Follow._ARGTYPE_DELEGATE_in_arg198); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(57, 23);
				ID3=(CommonTree)Match(input,ID,Follow._ID_in_arg200); 

				Match(input, TokenTypes.Up, null); 

				DebugLocation(57, 27);
				 val = (ID3!=null?ID3.Text:null); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:58:4: ^( ARGTYPE_INT INT )
				{
				DebugLocation(58, 4);
				DebugLocation(58, 6);
				Match(input,ARGTYPE_INT,Follow._ARGTYPE_INT_in_arg209); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(58, 18);
				INT4=(CommonTree)Match(input,INT,Follow._INT_in_arg211); 

				Match(input, TokenTypes.Up, null); 

				DebugLocation(58, 23);
				 val = (INT4!=null?INT4.Text:null); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:59:4: ^( ARGTYPE_FLOAT FLOAT )
				{
				DebugLocation(59, 4);
				DebugLocation(59, 6);
				Match(input,ARGTYPE_FLOAT,Follow._ARGTYPE_FLOAT_in_arg220); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(59, 20);
				FLOAT5=(CommonTree)Match(input,FLOAT,Follow._FLOAT_in_arg222); 

				Match(input, TokenTypes.Up, null); 

				DebugLocation(59, 27);
				 val = (FLOAT5!=null?FLOAT5.Text:null); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arg", 7);
			LeaveRule("arg", 7);
			LeaveRule_arg();
	    }
	 	DebugLocation(60, 1);
		} finally { DebugExitRule(GrammarFileName, "arg"); }
		return val;

	}
	// $ANTLR end "arg"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expr() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expr() {}

	// $ANTLR start "expr"
	// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:64:1: expr : ^( PROGEXPR ( orExpr )+ PROGEXPR_RESTART ) ;
	[GrammarRule("expr")]
	private void expr()
	{
		EnterRule_expr();
		EnterRule("expr", 8);
		TraceIn("expr", 8);
		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(64, 1);
		try
		{
			// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:64:7: ( ^( PROGEXPR ( orExpr )+ PROGEXPR_RESTART ) )
			DebugEnterAlt(1);
			// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:65:2: ^( PROGEXPR ( orExpr )+ PROGEXPR_RESTART )
			{
			DebugLocation(65, 2);
			DebugLocation(65, 5);
			Match(input,PROGEXPR,Follow._PROGEXPR_in_expr241); 

			DebugLocation(65, 14);
			 Instructions.Add("NoOp"); Labels.Add("Start", Instructions.Count); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(65, 85);
			// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:65:85: ( orExpr )+
			int cnt6=0;
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, decisionCanBacktrack[6]);
				int LA6_0 = input.LA(1);

				if ((LA6_0==ID||LA6_0==NOT||LA6_0==21||LA6_0==27))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:65:85: orExpr
					{
					DebugLocation(65, 85);
					PushFollow(Follow._orExpr_in_expr245);
					orExpr();
					PopFollow();


					}
					break;

				default:
					if (cnt6 >= 1)
						goto loop6;

					EarlyExitException eee6 = new EarlyExitException( 6, input );
					DebugRecognitionException(eee6);
					throw eee6;
				}
				cnt6++;
			}
			loop6:
				;

			} finally { DebugExitSubRule(6); }

			DebugLocation(65, 93);
			Match(input,PROGEXPR_RESTART,Follow._PROGEXPR_RESTART_in_expr248); 
			DebugLocation(65, 110);
			 Instructions.Add( "Jump " + (Labels["Start"] - Instructions.Count) ); 

			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr", 8);
			LeaveRule("expr", 8);
			LeaveRule_expr();
	    }
	 	DebugLocation(66, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return;

	}
	// $ANTLR end "expr"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orExpr() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orExpr() {}

	// $ANTLR start "orExpr"
	// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:68:1: orExpr : ( ^( '|' andExpr andExpr ) | andExpr );
	[GrammarRule("orExpr")]
	private void orExpr()
	{
		EnterRule_orExpr();
		EnterRule("orExpr", 9);
		TraceIn("orExpr", 9);
		try { DebugEnterRule(GrammarFileName, "orExpr");
		DebugLocation(68, 1);
		try
		{
			// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:69:3: ( ^( '|' andExpr andExpr ) | andExpr )
			int alt7=2;
			try { DebugEnterDecision(7, decisionCanBacktrack[7]);
			int LA7_0 = input.LA(1);

			if ((LA7_0==27))
			{
				alt7 = 1;
			}
			else if ((LA7_0==ID||LA7_0==NOT||LA7_0==21))
			{
				alt7 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 7, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:69:5: ^( '|' andExpr andExpr )
				{
				DebugLocation(69, 5);
				DebugLocation(69, 7);
				Match(input,27,Follow._27_in_orExpr265); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(69, 11);
				PushFollow(Follow._andExpr_in_orExpr267);
				andExpr();
				PopFollow();

				DebugLocation(69, 19);
				PushFollow(Follow._andExpr_in_orExpr269);
				andExpr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(69, 28);
				 Instructions.Add( "Or" ); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:70:5: andExpr
				{
				DebugLocation(70, 5);
				PushFollow(Follow._andExpr_in_orExpr278);
				andExpr();
				PopFollow();


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("orExpr", 9);
			LeaveRule("orExpr", 9);
			LeaveRule_orExpr();
	    }
	 	DebugLocation(71, 1);
		} finally { DebugExitRule(GrammarFileName, "orExpr"); }
		return;

	}
	// $ANTLR end "orExpr"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_andExpr() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_andExpr() {}

	// $ANTLR start "andExpr"
	// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:73:1: andExpr : ( ^( '&' term term ) | term );
	[GrammarRule("andExpr")]
	private void andExpr()
	{
		EnterRule_andExpr();
		EnterRule("andExpr", 10);
		TraceIn("andExpr", 10);
		try { DebugEnterRule(GrammarFileName, "andExpr");
		DebugLocation(73, 1);
		try
		{
			// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:74:2: ( ^( '&' term term ) | term )
			int alt8=2;
			try { DebugEnterDecision(8, decisionCanBacktrack[8]);
			int LA8_0 = input.LA(1);

			if ((LA8_0==21))
			{
				alt8 = 1;
			}
			else if ((LA8_0==ID||LA8_0==NOT))
			{
				alt8 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 8, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:74:4: ^( '&' term term )
				{
				DebugLocation(74, 4);
				DebugLocation(74, 6);
				Match(input,21,Follow._21_in_andExpr291); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(74, 10);
				PushFollow(Follow._term_in_andExpr293);
				term();
				PopFollow();

				DebugLocation(74, 15);
				PushFollow(Follow._term_in_andExpr295);
				term();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(74, 21);
				 Instructions.Add( "And" ); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:75:4: term
				{
				DebugLocation(75, 4);
				PushFollow(Follow._term_in_andExpr303);
				term();
				PopFollow();


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("andExpr", 10);
			LeaveRule("andExpr", 10);
			LeaveRule_andExpr();
	    }
	 	DebugLocation(76, 1);
		} finally { DebugExitRule(GrammarFileName, "andExpr"); }
		return;

	}
	// $ANTLR end "andExpr"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_term() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_term() {}

	// $ANTLR start "term"
	// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:78:1: term : ( ^( NOT atom ) | atom );
	[GrammarRule("term")]
	private void term()
	{
		EnterRule_term();
		EnterRule("term", 11);
		TraceIn("term", 11);
		try { DebugEnterRule(GrammarFileName, "term");
		DebugLocation(78, 1);
		try
		{
			// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:78:7: ( ^( NOT atom ) | atom )
			int alt9=2;
			try { DebugEnterDecision(9, decisionCanBacktrack[9]);
			int LA9_0 = input.LA(1);

			if ((LA9_0==NOT))
			{
				alt9 = 1;
			}
			else if ((LA9_0==ID))
			{
				alt9 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:78:9: ^( NOT atom )
				{
				DebugLocation(78, 9);
				DebugLocation(78, 12);
				Match(input,NOT,Follow._NOT_in_term317); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(78, 16);
				PushFollow(Follow._atom_in_term319);
				atom();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(78, 23);
				 Instructions.Add( "Not" ); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:79:4: atom
				{
				DebugLocation(79, 4);
				PushFollow(Follow._atom_in_term328);
				atom();
				PopFollow();


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("term", 11);
			LeaveRule("term", 11);
			LeaveRule_term();
	    }
	 	DebugLocation(80, 1);
		} finally { DebugExitRule(GrammarFileName, "term"); }
		return;

	}
	// $ANTLR end "term"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_atom() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_atom() {}

	// $ANTLR start "atom"
	// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:82:1: atom : ID ;
	[GrammarRule("atom")]
	private void atom()
	{
		EnterRule_atom();
		EnterRule("atom", 12);
		TraceIn("atom", 12);
	    CommonTree ID6 = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "atom");
		DebugLocation(82, 1);
		try
		{
			// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:83:2: ( ID )
			DebugEnterAlt(1);
			// /Users/Abahr/TrailsForward/Assets/_Scripts/Library/StateMachine/StateMachineTransitionTree.g:83:4: ID
			{
			DebugLocation(83, 4);
			ID6=(CommonTree)Match(input,ID,Follow._ID_in_atom341); 
			DebugLocation(83, 7);
			 Instructions.Add( "PushBehavior " + (ID6!=null?ID6.Text:null) ); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("atom", 12);
			LeaveRule("atom", 12);
			LeaveRule_atom();
	    }
	 	DebugLocation(84, 1);
		} finally { DebugExitRule(GrammarFileName, "atom"); }
		return;

	}
	// $ANTLR end "atom"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _PROG_in_prog68 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _declBlock_in_prog70 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _expr_in_prog73 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _VARDECLBLOCK_in_declBlock88 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _decl_in_declBlock90 = new BitSet(new ulong[]{0x10008UL});
		public static readonly BitSet _VARDECL_in_decl103 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _name_in_decl107 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _type_in_decl111 = new BitSet(new ulong[]{0x8008UL});
		public static readonly BitSet _args_in_decl115 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _VARTYPE_in_type134 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_type136 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _VARNAME_in_name155 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_name157 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _VARARGS_in_args175 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _arg_in_args179 = new BitSet(new ulong[]{0x78UL});
		public static readonly BitSet _ARGTYPE_DELEGATE_in_arg198 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_arg200 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ARGTYPE_INT_in_arg209 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _INT_in_arg211 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ARGTYPE_FLOAT_in_arg220 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _FLOAT_in_arg222 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _PROGEXPR_in_expr241 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _orExpr_in_expr245 = new BitSet(new ulong[]{0x8204900UL});
		public static readonly BitSet _PROGEXPR_RESTART_in_expr248 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _27_in_orExpr265 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _andExpr_in_orExpr267 = new BitSet(new ulong[]{0x200900UL});
		public static readonly BitSet _andExpr_in_orExpr269 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _andExpr_in_orExpr278 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _21_in_andExpr291 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _term_in_andExpr293 = new BitSet(new ulong[]{0x900UL});
		public static readonly BitSet _term_in_andExpr295 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _term_in_andExpr303 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_term317 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _atom_in_term319 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _atom_in_term328 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_atom341 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
